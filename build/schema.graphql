# ======= Misc =======

type Account @entity {
  id: Bytes!
  # Parsing
  asAccessManager: AccessManager
  asAccessManaged: AccessManaged
  asAccessManagerRoleMember: AccessManagerRoleMember
  # Relationships
  membership: [AccessManagerRoleMember!]! @derivedFrom(field: "asAccount")
  operationCaller: [AccessManagedOperation!]! @derivedFrom(field: "caller")
  operationTarget: [AccessManagedOperation!]! @derivedFrom(field: "target")
  # Events
  operationExecutedSender: [OperationExecuted!]! @derivedFrom(field: "sender")
  operationScheduledCaller: [OperationScheduled!]! @derivedFrom(field: "caller")
  operationScheduledTarget: [OperationScheduled!]! @derivedFrom(field: "target")
  operationScheduledSender: [OperationScheduled!]! @derivedFrom(field: "sender")
  roleGranted: [RoleGranted!]! @derivedFrom(field: "account")
  roleGrantedSender: [RoleGranted!]! @derivedFrom(field: "sender")
  roleAdminChangedSender: [RoleAdminChanged!]! @derivedFrom(field: "sender")
  roleLabelSender: [RoleLabel!]! @derivedFrom(field: "sender")
  roleRevoked: [RoleRevoked!]! @derivedFrom(field: "account")
  roleRevokedSender: [RoleRevoked!]! @derivedFrom(field: "sender")
  targetAdminDelayUpdatedSender: [TargetAdminDelayUpdated!]!
    @derivedFrom(field: "sender")
  targetClosed: [TargetClosed!]! @derivedFrom(field: "target")
  targetClosedSender: [TargetClosed!]! @derivedFrom(field: "sender")
  targetFunctionRoleUpdated: [TargetFunctionRoleUpdated!]!
    @derivedFrom(field: "target")
  targetFunctionRoleUpdatedSender: [TargetFunctionRoleUpdated!]!
    @derivedFrom(field: "sender")
  authorityUpdated: [AuthorityUpdated!]! @derivedFrom(field: "authority")
  authorityUpdatedSender: [AuthorityUpdated!]! @derivedFrom(field: "sender")
  # Misc
  events: [Event!]! @derivedFrom(field: "emitter")
  transactions: [Transaction!]! @derivedFrom(field: "sender")
}

type Selector @entity(immutable: true) {
  id: Bytes! # bytes4
  # Relationships
  functionOf: [AccessManagedFunction]! @derivedFrom(field: "selector")
}

type Operation @entity(immutable: true) {
  id: Bytes!
  # Relationships
  operationOf: [AccessManagedOperation]! @derivedFrom(field: "operation")
}

type DelayedBigInt @entity {
  id: ID!
  oldValue: BigInt!
  value: BigInt!
  since: BigInt! # uint48
}

type Transaction @entity(immutable: true) {
  id: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
  sender: Account!
}

# ======= AccessManager =======

type AccessManager @entity(immutable: true) {
  id: Bytes!
  # Parsing
  asAccount: Account!
  # Relationships
  roles: [AccessManagerRole!]! @derivedFrom(field: "manager")
  managed: [AccessManaged!]! @derivedFrom(field: "manager")
  functions: [AccessManagedFunction!]! @derivedFrom(field: "manager")
  operations: [AccessManagedOperation!]! @derivedFrom(field: "manager")
}

type AccessManaged @entity {
  id: Bytes!
  adminDelay: DelayedBigInt! # uint32
  closed: Boolean! # bool
  # Parsing
  asAccount: Account!
  # Relationships
  manager: AccessManager!
}

type AccessManagerRoleMember @entity(immutable: true) {
  id: ID!
  # Parsing
  asAccount: Account!
  # Relationships
  role: AccessManagerRole!
  since: BigInt! # uint48
  executionDelay: DelayedBigInt! # uint32
}

type AccessManagedFunction @entity {
  id: ID!
  manager: AccessManager!
  # Relationships
  target: Account!
  selector: Selector!
  role: AccessManagerRole!
  # Events
  targetFunctionRoleUpdated: [TargetFunctionRoleUpdated!]!
    @derivedFrom(field: "selector")
}

enum AccessManagedOperationStatus {
  SCHEDULED
  EXECUTED
  CANCELED
}

type AccessManagedOperation @entity {
  id: ID!
  nonce: BigInt! # uint32
  schedule: BigInt! # uint48
  data: Bytes! # bytes
  status: AccessManagedOperationStatus!
  # Relationships
  operation: Operation!
  manager: AccessManager!
  caller: Account!
  target: Account!
  # Events
  operationCanceled: [OperationCanceled!]! @derivedFrom(field: "operation")
  operationExecuted: [OperationExecuted!]! @derivedFrom(field: "operation")
  operationScheduled: [OperationScheduled!]! @derivedFrom(field: "operation")
}

type AccessManagerRole @entity {
  id: ID!
  roleId: BigInt! # uint32
  manager: AccessManager!
  label: String
  grantDelay: DelayedBigInt! # uint32
  # Relationships
  admin: AccessManagerRole!
  guardian: AccessManagerRole!
  adminOf: [AccessManagerRole!]! @derivedFrom(field: "admin")
  guardianOf: [AccessManagerRole!]! @derivedFrom(field: "guardian")
  members: [AccessManagerRoleMember!]! @derivedFrom(field: "role")
  functions: [AccessManagedFunction!]! @derivedFrom(field: "role")
  # Events
  roleAdminChangedRole: [RoleAdminChanged!]! @derivedFrom(field: "role")
  roleAdminChangedAdmin: [RoleAdminChanged!]! @derivedFrom(field: "admin")
  roleGrantDelayChanged: [RoleGrantDelayChanged!]! @derivedFrom(field: "role")
  roleGranted: [RoleGranted!]! @derivedFrom(field: "role")
  roleGuardianChangedRole: [RoleGuardianChanged!]! @derivedFrom(field: "role")
  roleGuardianChangedGuardian: [RoleGuardianChanged!]!
    @derivedFrom(field: "guardian")
  roleLabel: [RoleLabel!]! @derivedFrom(field: "role")
  roleRevoked: [RoleRevoked!]! @derivedFrom(field: "role")
  targetFunctionRoleUpdated: [TargetFunctionRoleUpdated!]!
    @derivedFrom(field: "role")
}

# ======= Events =======

interface Event {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
}

type OperationCanceled implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  operation: AccessManagedOperation!
  nonce: BigInt! # uint32
}

type OperationExecuted implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  operation: AccessManagedOperation!
  nonce: BigInt! # uint32
}

type OperationScheduled implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  operation: AccessManagedOperation!
  nonce: BigInt! # uint32
  schedule: BigInt! # uint48
  caller: Account!
  target: Account!
  data: Bytes! # bytes
}

type RoleAdminChanged implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  admin: AccessManagerRole!
}

type RoleGrantDelayChanged implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  delay: BigInt! # uint32
  since: BigInt! # uint48
}

type RoleGranted implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  account: Account!
  delay: BigInt! # uint32
  since: BigInt! # uint48
  newMember: Boolean! # bool
}

type RoleGuardianChanged implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  guardian: AccessManagerRole!
}

type RoleLabel implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  label: String! # string
}

type RoleRevoked implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  role: AccessManagerRole!
  account: Account!
}

type TargetAdminDelayUpdated implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  target: Account!
  delay: BigInt! # uint32
  since: BigInt! # uint48
}

type TargetClosed implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  target: Account!
  closed: Boolean! # bool
}

type TargetFunctionRoleUpdated implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  target: Account!
  selector: AccessManagedFunction!
  role: AccessManagerRole!
}

type AuthorityUpdated implements Event @entity(immutable: true) {
  id: Bytes!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  sender: Account!
  authority: Account!
}
